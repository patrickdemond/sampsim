/*=========================================================================

  Program:  sampsim
  Module:   utilities.h
  Language: C++

  Author: Patrick Emond <emondpd@mcmaster.ca>

=========================================================================*/
//
// .SECTION Description
// A utilities header to include typedefs, macros, global functions, etc.
//

#ifndef __sampsim_utilities_h
#define __sampsim_utilities_h

#define SAMPSIM_VERSION_MAJOR @SAMPSIM_VERSION_MAJOR@
#define SAMPSIM_VERSION_MINOR @SAMPSIM_VERSION_MINOR@
#define SAMPSIM_VERSION_PATCH @SAMPSIM_VERSION_PATCH@

#define SAMPSIM_ROOT_DIR "@SAMPSIM_ROOT_DIR@"
#define SAMPSIM_AUX_DIR "@SAMPSIM_AUX_DIR@"
#define SAMPSIM_SRC_DIR "@SAMPSIM_SRC_DIR@"

#if __cplusplus <= 199711L
  #error This library needs at least a C++11 compliant compiler
#endif

#define GNUPLOT_AVAILABLE @GNUPLOT_AVAILABLE@

#include <algorithm>
#include <archive.h>
#include <archive_entry.h>
#include <ctime>
#include <cctype>
#include <fcntl.h>
#include <iomanip>
#include <iostream>
#include <map>
#include <random>
#include <sstream>
#include <stdarg.h>
#include <stdio.h>
#include <sys/file.h>
#include <time.h>
#include <unistd.h>
#include <vector>

#include "coordinate.h"

/**
 * @addtogroup sampsim
 * @{
 */

/**
 * @namespace sampsim
 * @brief A namespace containing all of SampSim's library classes
 */
namespace sampsim
{
  class population;
  class town;
  class tile;
  class building;
  class household;
  class individual;

  typedef std::map< std::string, std::string > file_list_type;
  /**
   * @typedef population_list_type
   */
  typedef std::vector< population* > population_list_type;

  /**
   * @typedef town_list_type
   */
  typedef std::vector< town* > town_list_type;

  /**
   * @typedef tile_list_type
   */
  typedef std::map< std::pair< unsigned int, unsigned int >, tile* > tile_list_type;

  /**
   * @typedef building_list_type
   */
  typedef std::vector< building* > building_list_type;

  /**
   * @typedef household_list_type
   */
  typedef std::vector< household* > household_list_type;

  /**
   * @typedef individual_list_type
   */
  typedef std::vector< individual* > individual_list_type;

  /**
   * @typedef coordinate_list_type
   */
  typedef std::vector< coordinate > coordinate_list_type;

  /**
   * @enum age_type
   * A list of all possible ways to select inviduals by age
   */
  enum age_type
  {
    UNKNOWN_AGE_TYPE = 0,
    ANY_AGE,
    ADULT,
    CHILD
  };

  /**
   * Converts the name of an age type to its enum value
   */
  inline static age_type get_age_type( const std::string name )
  {
    if( "either" == name ) return ANY_AGE;
    else if( "adult" == name ) return ADULT;
    else if( "child" == name ) return CHILD;
    return UNKNOWN_AGE_TYPE;
  }

  /**
   * Converts the enum value of an age type to its name
   */
  inline static std::string get_age_type_name( const age_type type )
  {
    if( ANY_AGE == type ) return "either";
    else if( ADULT == type ) return "adult";
    else if( CHILD == type ) return "child";
    return "unknown";
  }

  /**
   * @enum sex_type
   * A list of all possible ways to select individuals by sex
   */
  enum sex_type
  {
    UNKNOWN_SEX_TYPE = 0,
    ANY_SEX,
    FEMALE,
    MALE
  };

  /**
   * Converts the name of a sex type to its enum value
   */
  inline static sex_type get_sex_type( const std::string name )
  {
    if( "either" == name ) return ANY_SEX;
    else if( "female" == name ) return FEMALE;
    else if( "male" == name ) return MALE;
    return UNKNOWN_SEX_TYPE;
  }

  /**
   * Converts the enum value of a sex type to its name
   */
  inline static std::string get_sex_type_name( const sex_type type )
  {
    if( ANY_SEX == type ) return "either";
    else if( FEMALE == type ) return "female";
    else if( MALE == type ) return "male";
    return "unknown";
  }

  /**
   * @enum state_type
   * A list of all possible disease states
   */
  enum state_type
  {
    UNKNOWN_STATE_TYPE = 0,
    ANY_STATE,
    HEALTHY,
    DISEASED
  };

  /**
   * Converts the name of a disease type to its enum value
   */
  inline static state_type get_state_type( const std::string name )
  {
    if( "either" == name ) return ANY_STATE;
    else if( "healthy" == name ) return HEALTHY;
    else if( "diseased" == name ) return DISEASED;
    return UNKNOWN_STATE_TYPE;
  }

  /**
   * Converts the enum value of a disease type to its name
   */
  inline static std::string get_state_type_name( const state_type type )
  {
    if( ANY_STATE == type ) return "either";
    else if( HEALTHY == type ) return "healthy";
    else if( DISEASED == type ) return "diseased";
    return "unknown";
  }

  /**
   * @enum exposure_type
   * A list of all possible exposure states
   */
  enum exposure_type
  {
    UNKNOWN_EXPOSURE_TYPE = 0,
    ANY_EXPOSURE,
    NOT_EXPOSED,
    EXPOSED
  };

  /**
   * Converts the name of an exposure type to its enum value
   */
  inline static exposure_type get_exposure_type( const std::string name )
  {
    if( "either" == name ) return ANY_EXPOSURE;
    else if( "not exposed" == name ) return NOT_EXPOSED;
    else if( "exposed" == name ) return EXPOSED;
    return UNKNOWN_EXPOSURE_TYPE;
  }

  /**
   * Converts the enum value of an exposure type to its name
   */
  inline static std::string get_exposure_type_name( const exposure_type type )
  {
    if( ANY_EXPOSURE == type ) return "either";
    else if( NOT_EXPOSED == type ) return "not exposed";
    else if( EXPOSED == type ) return "exposed";
    return "unknown";
  }

  /**
   * Safely compares if two doubles are equal (avoids CPU floating-point messiness)
   * @link http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html
   */
  inline static double safe_equals( const double a, const double b )
  {
    double diff = a - b;
    return std::abs( diff ) <= 1e-10*( a+b );
  }

  /**
   * Safely subtracts two doubles (avoids CPU floating-point messiness)
   * @link http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html
   */
  inline static double safe_subtract( const double a, const double b )
  {
    return safe_equals( a, b ) ? 0.0 : a - b;
  }

  /**
   * @class utilities
   * @author Patrick Emond <emondpd@mcmaster.ca>
   * @brief A class of various utility functions (all inline static functions)
   */
  class utilities
  {
  public:
    /**
     * Returns a string representation of the software version
     */
    inline static std::string get_version()
    {
      std::stringstream stream;
      stream << SAMPSIM_VERSION_MAJOR << "." << SAMPSIM_VERSION_MINOR << "." << SAMPSIM_VERSION_PATCH;
      return stream.str();
    }

    /**
     * Outputs text to the standard output
     * 
     * This function will prefix the output with the application's running time
     */
    inline static void output( const std::string message, va_list args )
    {
      if( !utilities::quiet )
      {
        char buffer[512];
        vsprintf( buffer, message.c_str(), args );

        double elapsed = (float)( clock() - utilities::start_time ) / CLOCKS_PER_SEC;
        int hours = floor( elapsed / 3600 );
        int minutes = floor( ( elapsed - hours * 3600 ) / 60 );
        double seconds = elapsed - hours * 3600 - minutes * 60;
        char time[32];
        sprintf( time, "[%d:%02d:%05.2f]", hours, minutes, seconds );

        std::cout << time << " " << buffer << std::endl;
      }
    }

    /**
     * Outputs text to the standard output
     * 
     * This function will prefix the output with the application's running time
     */
    inline static void output( const std::string message, ... )
    {
      va_list args;  // Pointer to optional arguments
      va_start( args, message );
      utilities::output( message, args );
    }

    /**
     * Executes an operation on the command line and returns the command's output
     */
    inline static std::string exec( const std::string command )
    {
      FILE* pipe = popen( command.c_str(), "r" );
      if( !pipe ) return "ERROR";
      char buffer[128];
      std::string result = "";
      while( !feof( pipe ) ) if( fgets( buffer, 128, pipe ) != NULL ) result += buffer;
      pclose( pipe );
      return 0 < result.length() ? result.substr( 0, result.length() - 1 ) : "";
    }

    /**
     * Returns whether a file exists
     */
    inline static bool file_exists( const std::string filename )
    {
      if( filename.empty() ) return false;
      return access( filename.c_str(), R_OK )  == 0;
    }

    /**
     * Returns a file's extension (the string after the last . in the filename)
     */
    inline static std::string get_file_extension( const std::string filename )
    {
      std::string::size_type dot_pos = filename.rfind( "." );
      std::string extension = ( dot_pos == std::string::npos ) ? "" : filename.substr( dot_pos );
      return extension;
    }

    /**
     * Returns the path from a full path and filename
     */
    inline static std::string get_filename_path( const std::string filename )
    {
      std::string::size_type slash_pos = filename.rfind("/");
      if( slash_pos != std::string::npos )
      {
        std::string path = filename.substr( 0, slash_pos );
        if( path.size() == 2 && path[1] == ':' )
        {
          return path + '/';
        }
        if( path.size() == 0 )
        {
          return "/";
        }
        return path;
      }
      else
      {
        return "";
      }
    }

    /**
     * Returns the file name from a full path and filename
     */
    inline static std::string get_filename_name( const std::string filename )
    {
      std::string::size_type slash_pos = filename.find_last_of("/");
      if( slash_pos != std::string::npos )
      {
        return filename.substr( slash_pos + 1 );
      }
      else
      {
        return filename;
      }
    }

    /**
     * Reads the contents of a gzip file into a string
     * If no fd parameter is passed the funciton will open the file itself
     */
    inline static file_list_type read_gzip( const std::string filename, int fd = 0 )
    {
      int result;
      std::stringstream stream;
      bool error = false;
      bool close_file = false;
      struct archive *archive = archive_read_new();
      struct archive_entry *entry;
      file_list_type files;

      if( 0 == fd )
      {
        fd = open( filename.c_str(), O_RDONLY );
        close_file = true;
      }

      if( 0 == fd )
      {
        stream << "Unable to open file \"" << filename << "\"";
        error = true;
      }
      else
      {
        archive_read_support_format_tar( archive );
        archive_read_support_filter_gzip( archive );

        if( ARCHIVE_OK != archive_read_open_fd( archive, fd, 10240 ) )
        {
          stream << "Cannot read gzip file \"" << filename << "\", file is not in gzip format";
          error = true;
        }

        if( !error )
        {
          while( true )
          {
            result = archive_read_next_header( archive, &entry );
            if( ARCHIVE_EOF == result ) break;
            else if( ARCHIVE_OK != result )
            {
              stream << "Archived file \"" << filename << "\", is empty";
              error = true;
              break;
            }
            else
            {
              int size = archive_entry_size( entry );
              std::string str;
              str.resize( size );
              if( ARCHIVE_OK > archive_read_data( archive, &str[0], size ) )
              {
                stream << "Error while reading archive data from \"" << filename << "\"";
                error = true;
                break;
              }
              files[archive_entry_pathname( entry )] = str;
            }
          }

          if( ARCHIVE_OK != archive_read_free( archive ) )
            std::cout << "WARNING: There was a problem freeing archive memory" << std::endl;
        }

        if( close_file ) close( fd );
      }

      if( error ) throw std::runtime_error( stream.str() );

      return files;
    }

    /**
     * Convenience method, see other write_gzip method
     */
    inline static void write_gzip( const std::string filename, const std::string data, const bool append = false )
    {
      file_list_type files;
      files[filename] = data;
      utilities::write_gzip( filename, files, append );
    }

    /**
     * Writes the contents of strings into a gzip file
     */
    inline static void write_gzip(
      const std::string filename,
      const file_list_type files,
      const bool append = false )
    {
      file_list_type working_files;
      std::string tar_filename = filename + ".tar.gz";
      struct archive *archive = archive_write_new();
      struct archive_entry *entry;
      time_t timer;
      time( &timer );
      struct flock fl;
      fl.l_type   = F_WRLCK;  // F_RDLCK, F_WRLCK, F_UNLCK
      fl.l_whence = SEEK_SET; // SEEK_SET, SEEK_CUR, SEEK_END
      fl.l_start  = 0;        // Offset from l_whence
      fl.l_len    = 0;        // length, 0 = to EOF
      fl.l_pid    = getpid(); // our PID

      int fd = open( tar_filename.c_str(), O_RDWR | O_CREAT, 0664 );
      if( -1 == fcntl( fd, F_SETLKW, &fl ) ) throw std::runtime_error( "Failed to get file lock" );

      fl.l_type = F_UNLCK; // prepare to unlock below

      if( append )
      {
        // first see if the gzip file already exists
        try
        {
          // open the tar file and read its existing contents
          file_list_type existing_files = read_gzip( tar_filename, fd );
          working_files.insert( existing_files.begin(), existing_files.end() );
        }
        catch( std::runtime_error &e ) {} // do nothing if file is invalid
      }

      working_files.insert( files.begin(), files.end() );

      lseek( fd, SEEK_SET, 0 ); // if we read anything we have to return to the start of the file
      archive_write_add_filter_gzip( archive );
      archive_write_set_format_pax_restricted( archive );
      if( ARCHIVE_OK != archive_write_open_fd( archive, fd ) )
      {
        std::stringstream stream;
        stream << "Unable to open \"" << tar_filename << "\" for writing" << std::endl;
        fcntl( fd, F_SETLK, &fl );
        throw std::runtime_error( stream.str() );
      }

      for( auto it = working_files.cbegin(); it != working_files.cend(); ++it )
      {
        std::string filename = it->first;
        std::string data = it->second;
        entry = archive_entry_new();
        archive_entry_set_pathname( entry, filename.c_str() );
        archive_entry_set_size( entry, data.size() );
        archive_entry_set_filetype( entry, AE_IFREG );
        archive_entry_set_atime( entry, timer, 0 );
        archive_entry_set_ctime( entry, timer, 0 );
        archive_entry_set_mtime( entry, timer, 0 );
        archive_entry_set_perm( entry, 0644 );

        int result = archive_write_header( archive, entry );
        if( ARCHIVE_OK != result )
        {
          std::stringstream stream;
          stream << "Unable to write archive header to \"" << tar_filename
                 << "\" (error code " << result << ")" << std::endl;
          fcntl( fd, F_SETLK, &fl );
          throw std::runtime_error( stream.str() );
        }

        if( 0 > archive_write_data( archive, data.c_str(), data.size() ) )
        {
          std::stringstream stream;
          stream << "Unable to write archive data to \"" << tar_filename << "\"" << std::endl;
          fcntl( fd, F_SETLK, &fl );
          throw std::runtime_error( stream.str() );
        }

        archive_entry_free( entry );
      }

      archive_write_close( archive );
      if( ARCHIVE_OK != archive_write_free( archive ) )
        std::cout << "WARNING: There was a problem freeing archive memory" << std::endl;

      // release the file lock
      if( -1 == fcntl( fd, F_SETLK, &fl ) ) throw std::runtime_error( "Failed to release file lock" );
    }

    /**
     * Divides a string by the provided separator, returning the results as a vector of strings
     */
    inline static std::vector< std::string > explode( const std::string str, const std::string separator )
    {
      std::string working_str = str;
      std::vector< std::string > results;
      int found = working_str.find_first_of( separator );
      while( found != std::string::npos )
      {
        if( found > 0 ) results.push_back( working_str.substr( 0, found ) );
        working_str = working_str.substr( found + 1 );
        found = working_str.find_first_of( separator );
      }
      if( working_str.length() > 0 ) results.push_back( working_str );
      return results;
    }

    /**
     * Removes all space characters (as defined by std::isspace) from the left side of a string
     */
    inline static std::string &ltrim( std::string &s )
    {
      s.erase(
        s.begin(), std::find_if(
          s.begin(), s.end(), std::not1(
            std::ptr_fun<int, int>( std::isspace ) ) ) );
      return s;
    }

    /**
     * Removes all space characters (as defined by std::isspace) from the right side of a string
     */
    inline static std::string &rtrim( std::string &s )
    {
      s.erase(
        std::find_if(
          s.rbegin(), s.rend(), std::not1(
            std::ptr_fun<int, int>( std::isspace ) ) ).base(), s.end() );
      return s;
    }

    /**
     * Removes all space characters (as defined by std::isspace) from both sides of a string
     */
    inline static std::string &trim(std::string &s)
    {
      return ltrim(rtrim(s));
    }

    /**
     * Returns a random integer between the min and max values, inclusive
     */
    inline static unsigned int random( const unsigned int min, const unsigned int max )
    {
      if( max < min )
      {
        std::stringstream stream;
        stream << "Called random() with min and max being " << min << " and " << max << ", respectively";
        throw std::runtime_error( stream.str() );
      }

      return random_engine() % ( max - min + 1 ) + min;
    }

    /**
     * Returns a random value in [0, 1)
     */
    inline static double random()
    {
      return static_cast< double >( random_engine() - random_engine.min() ) /
             static_cast< double >( random_engine.max() - random_engine.min() );
    }

    /**
     * @struct safe_delete_type
     * @brief Used for safely deleting memory
     */
    struct safe_delete_type
    {
      /**
       * Overrides the () operator in order to allow instance of this struct to act as a
       * safe-delete mechanism
       */
      template <typename T>
      void operator()( T *&p ) { if( p ) { delete p; p = 0; } };
    };

    /**
     * The random engine used by the random functions
     */
    static std::mt19937 random_engine;

    /**
     * A struct instance used to safely delete memory
     */
    static safe_delete_type safe_delete;

    /**
     * Whether to output additional messages during execution
     */
    static bool verbose;

    /**
     * Whether to prevent all output
     */
    static bool quiet;

    /**
     * A running (1-based) sample count used to identify which sample is being written to CSV
     */
    static unsigned int write_sample_number;

    /**
     * A clock used to track execution time
     */
    static clock_t start_time;

    /**
     * A list of disease relative risks (and the total number)
     */
    static double rr[4];
    static const int rr_size;
  };
}

/** @} end of doxygen group */

#endif // __utilities_h
