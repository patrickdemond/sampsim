How to build sampsim
====================

sampsim uses CMake (http://cmake.org/) to configure its build process.  CMake is operating system
independent, so in theory it should be possible to build this project under Linux, Windows or
Macintosh.  I strees the words "in theory" since it has currently only been tested and developed
under Linux.


Required Libraries
==================

CMake (cmake.org)
-----------------
There are plenty of pre-compiled binaries of CMake available on the website, or you can download
the source and build it yourself.  Also, many linux distros have it build into their package
managers.  I recommend trying this option first since it's the quickest and easiest to do.


JSON CPP (jsoncpp.sourceforge.net)
----------------------------------
You will need the jsoncpp development libraries.  You can download these from the sourceforge
website or install them using your distro's package manager (try package libjsoncpp-dev)


C++11 compliant compiler
------------------------
If you are using gcc < 4.8 you will need to upgrade your c and c++ compilers.  If your operating
system is Ubuntu the following (run as root) will install the required compilers for you:

add-apt-repository ppa:ubuntu-toolchain-r/test
apt-get update
apt-get install gcc-4.8 g++-4.8

You can either change the path to the new compilers in your CMakeCache.txt file or change the
default compiler by using commands:

update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 50
update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 50

Optional Libraries
==================

Gnuplot (gnuplot.info)
----------------------
By installing this package you will be provided with an additional option (--plot) which will
plot populations and samples and write them to disk.  You can download this package from the
Gnuplot website or install it using your distro's package manager (try packages gnuplot and
gnuplot-qt).


Building sampsim
================

1. Get a copy of sampsim.

2. Create a build directory somewhere OUTSIDE of the sampsim source code tree so as not to
   polute the repository.

3. Inside your build directory, run cmake:

   For linux: cmake -G "Unix Makefiles" /path/to/sampsim/build

4. Open the CMakeCache.txt file and change the following:

   CMAKE_BUILD_TYPE:STRING=Release

5. Re-run cmake by typing "cmake ." in the build directory.  When it is done you should see:
   "Build files have been written to: ..."

6. You are now ready to build sampsim by typing "make".

Building documentation
======================

1. Install the following packages: doxygen gnuplot graphviz

2. Edit the CMakeCache.txt file, setting BUILD_DOCUMENTATION to ON

3. Re-run cmake in the root of the build directory, this will create a new directory in your
   build directory named doxygen.

4. If after running the cmake command you get the following message then you will need to
   install the doxygen and gnuplot packages for your operating system:

   Could NOT find Doxygen (missing:  DOXYGEN_EXECUTABLE) 
   Could NOT find Gnuplot (missing:  GNUPLOT_EXECUTABLE)

5. In the doxygen directory run cmake -P doc_makeall.cmake  If after running this command you
   get the following error then you will also need to install the graphviz package for your
   operating system:

   CMake Error at doc_makeall.cmake:18 (message):
     error: cannot build sampsim documentation without dot

   Then re-run cmake in the root of the build directory once more before trying step 5 again.
   If successful you will now have a doc/html directory in your doxygen directory.  Point a
   web browser to the index.html file in this directory to browse the API documentation.

Building unit and visualization testing
=======================================

1. Change the testing boolean in the CMakeCache.txt file:

   BUILD_TESTING:BOOL=ON

2. Re-run cmake to configure the tests, re-make the project then run make test:

   cmake .
   make
   make test

3. To generate visualizations go into the build tree's Testing/visualization directory and run
   the create command:

   cd Testing/visualization
   ./build.sh
   ./create


BMB Notes
==========================

* on older Linux systems you may run into trouble at step 3(?) of building;  "This library needs at least a C++11 compliant compiler". On Ubuntu `sudo apt-get install g++-4.8` (I installed gcc-4.8 first, probably not necessary?) and changing `CMAKE_CXX_COMPILER:FILEPATH=/usr/bin/g++-4.8` seems to work (or if you want to make this change system-wide, change `/etc/alternatives/c++`
* information about addressing gnuplot 4.6 dependency (installing on Ubuntu 12.04): https://priyansmurarka.wordpress.com/2013/07/02/gnuplot-on-ubuntu-12-04/
