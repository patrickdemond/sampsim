==========
on bayes:


## copy project from bitbucket
git clone https://bbolker@bitbucket.org/bbolker/sampling-simulation-project.git
## set up a separate build directory as noted in readme
mkdir sampbuild
## go there
cd sampbuild
## setup for more recent compiler (but see below)
scl enable devtoolset-2 bash 
## as specified in readme ...
cmake -G "Unix Makefiles" ../sampling-simulation-project/build
##
# now change CMAKE_BUILD_TYPE:STRING=Release in CMakeCache.txt as specified
## as in readme
cmake .
## /usr/bin/c++ --version is still 4.4.7, so change in CMakeCache.txt:
# CMAKE_CXX_COMPILER:FILEPATH=/opt/rh/devtoolset-2/root/usr/bin/g++
## as in readme:
make

bash-4.1$ make
-- The CXX compiler identification is GNU 4.8.2
-- Check for working CXX compiler: /opt/rh/devtoolset-2/root/usr/bin/g++
-- Check for working CXX compiler: /opt/rh/devtoolset-2/root/usr/bin/g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Found JSONCpp: /usr/local/include, /usr/local/lib/libjsoncpp.a
-- Configuring done
-- Generating done
-- Build files have been written to: /home/bolker/sampbuild
[  3%] Building CXX object lib/local/CMakeFiles/sampsim.dir/base_object.cxx.o
[snip]
[ 50%] Building CXX object lib/local/CMakeFiles/sampsim.dir/utilities.cxx.o
Linking CXX shared library libsampsim.so
/opt/rh/devtoolset-2/root/usr/libexec/gcc/x86_64-redhat-linux/4.8.2/ld: /usr/local/lib/libjsoncpp.a(json_reader.cpp.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC
/usr/local/lib/libjsoncpp.a: could not read symbols: Bad value
collect2: error: ld returned 1 exit status
make[2]: *** [lib/local/libsampsim.so] Error 1
make[1]: *** [lib/local/CMakeFiles/sampsim.dir/all] Error 2
make: *** [all] Error 2







=============
on kraken.sharcnet.ca

  /work/bolker/projects/sampling (should be readable)

copy jsoncpp, scons

tar zxvf <whatever>  ## to unpack
  unzip scons_* into the jsoncpp directory
python scons-2.3.1/script/scons

cmake -G "Unix Makefiles" ../sampling-simulation-project/build/

cmake version 2.6-patch 4
 CMake 2.8 or higher is required.


so instead:

cmake28 -G "Unix Makefiles" ../sampling-simulation-project/build/

now we need to build/install JsonCpp

... README.txt says we need Scons but it appears to be installed
already in /usr/bin

scons platform=linux-gcc

see
http://stackoverflow.com/questions/4628922/building-jsoncpp-linux-an-instruction-for-us-mere-mortals

"jsoncpp doesn't seem to install itself, so you'll have to manually copy the library and header files wherever you want them when you're building applications that use the library."

modify CMakeCache.txt as follows:

/Path to a file.
JSONCPP_INCLUDE_DIR:PATH=../jsoncpp-src-0.5.0/include
//Path to a library.
JSONCPP_LIBRARIES:FILEPATH=../jsoncpp-src-0.5.0/libs

# now change CMAKE_BUILD_TYPE:STRING=Release in CMakeCache.txt as specified
## as in readme
cmake28 .
make

##  catastrophic error: #error directive: This library needs at least a C++11 compliant compiler
