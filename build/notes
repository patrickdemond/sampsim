==========
on bayes:


## copy project from bitbucket
git clone https://bbolker@bitbucket.org/bbolker/sampling-simulation-project.git
## set up a separate build directory as noted in readme
mkdir sampbuild
## go there
cd sampbuild
## setup for more recent compiler
scl enable devtoolset-2 bash 
## as specified in readme ...
cmake -G "Unix Makefiles" ../sampling-simulation-project/build
##
# now change CMAKE_BUILD_TYPE:STRING=Release in CMakeCache.txt as specified
## as in readme:
cmake .
## 
## DON'T change CMAKE_CXX_COMPILER:FILEPATH; version set by configure,
## CMAKE_CXX_COMPILER:FILEPATH=/opt/rh/devtoolset-2/root/usr/bin/c++
##  appears to be OK
## as in readme:
make

=============
on kraken.sharcnet.ca:

  /work/bolker/projects/sampling (should be readable)

copy jsoncpp, scons

tar zxvf <whatever>  ## to unpack
  unzip scons_* into the jsoncpp directory (unnecessary?)
python scons-2.3.1/script/scons

cmake -G "Unix Makefiles" ../sampling-simulation-project/build/

cmake version 2.6-patch 4
 CMake 2.8 or higher is required.


so instead:

cmake28 -G "Unix Makefiles" ../sampling-simulation-project/build/

now we need to build/install JsonCpp

... README.txt says we need Scons but it appears to be installed
already in /usr/bin

scons platform=linux-gcc

see
http://stackoverflow.com/questions/4628922/building-jsoncpp-linux-an-instruction-for-us-mere-mortals

"jsoncpp doesn't seem to install itself, so you'll have to manually copy the library and header files wherever you want them when you're building applications that use the library."

modify CMakeCache.txt as follows:

/Path to a file.
JSONCPP_INCLUDE_DIR:PATH=../jsoncpp-src-0.5.0/include
//Path to a library.
JSONCPP_LIBRARIES:FILEPATH=../jsoncpp-src-0.5.0/libs

# now change CMAKE_BUILD_TYPE:STRING=Release in CMakeCache.txt as specified
## as in readme
cmake28 .
make

##  catastrophic error: #error directive: This library needs at least a C++11 compliant compiler
